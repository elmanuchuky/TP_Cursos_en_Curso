/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import Model.Curso;
import Model.DatosGenerales;
import Model.GestorCursante;
import Model.GestorCurso;
import Model.GestorDatosGenerales;
import Model.GestorInscripcion;
import Model.GestorMatriculado;
import Model.GestorTipoDni;
import Model.Matriculado;
import Model.TipoDni;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/**
 *
 * @author Yasmin
 */
public class EditarInscripcion extends javax.swing.JFrame {

    /**
     * Creates new form EditarInscripcion
     */
    GestorInscripcion gi;
    GestorCurso gc;
    GestorDatosGenerales dg;
    GestorMatriculado gm ;
    GestorCursante cg;
    private int instancia;
    private String mailFiltro;
    private int legajo;
    
    private String nombre;
    private String apellido;
    private int tipoDni;
    private int dni;
    private String fechaNacimiento;
    private String telefono;
    private String email;
    private String profecion;
    
    final JDialog dialog = new JDialog();
    
    public EditarInscripcion() {
        initComponents();
        cargaCmbMesAnip();
        cargarDiaCombo();
        this.setLocationRelativeTo(null);
        dialog.setAlwaysOnTop(true);
        
        GestorTipoDni gtd = new GestorTipoDni();
        try {
            cargarComboTipoDni(gtd.obtenerTodos());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditarInscripcion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EditarInscripcion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public EditarInscripcion (int x) {
        initComponents();
        cargaCmbMesAnip();
        cargarDiaCombo();
        this.setLocationRelativeTo(null);
        dialog.setAlwaysOnTop(true);
        
        instancia = x;
        
        switch (instancia){
            case 1://matriculado
                txtMailBusquea.setEnabled(false);
                txtLegajo.setEnabled(true);
            break;
            case 2://Familiar
                txtMailBusquea.setEnabled(true);
                txtLegajo.setEnabled(true);
            break;
            case 3://Otro
                txtMailBusquea.setEnabled(false);
                txtLegajo.setEnabled(false);
            break;
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbTipoDocumento = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtDocumento = new javax.swing.JTextField();
        btnModificar = new javax.swing.JButton();
        txtNombre = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtApellido = new javax.swing.JTextField();
        txtLegajo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtMail = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtProfecion = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cmbDia = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        cmbMes = new javax.swing.JComboBox();
        cmbAnio = new javax.swing.JComboBox();
        txtMailBusquea = new javax.swing.JTextField();
        tctCurso = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Editar Inscripto");
        setAlwaysOnTop(true);
        setIconImage(getIconImage());
        setMinimumSize(new java.awt.Dimension(680, 330));
        setPreferredSize(new java.awt.Dimension(680, 330));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        cmbTipoDocumento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbTipoDocumento.setEnabled(false);
        getContentPane().add(cmbTipoDocumento);
        cmbTipoDocumento.setBounds(98, 141, 69, 30);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("/");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(500, 150, 8, 17);

        txtDocumento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtDocumento.setEnabled(false);
        getContentPane().add(txtDocumento);
        txtDocumento.setBounds(173, 141, 123, 30);

        btnModificar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/arrow.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.setEnabled(false);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        getContentPane().add(btnModificar);
        btnModificar.setBounds(540, 265, 105, 30);

        txtNombre.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtNombre.setEnabled(false);
        getContentPane().add(txtNombre);
        txtNombre.setBounds(80, 103, 230, 30);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Legajo");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(20, 60, 64, 17);

        txtApellido.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtApellido.setEnabled(false);
        getContentPane().add(txtApellido);
        txtApellido.setBounds(382, 103, 270, 30);

        txtLegajo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtLegajo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLegajoActionPerformed(evt);
            }
        });
        getContentPane().add(txtLegajo);
        txtLegajo.setBounds(80, 53, 110, 30);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Nombre");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(20, 110, 67, 17);

        txtTelefono.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtTelefono.setEnabled(false);
        getContentPane().add(txtTelefono);
        txtTelefono.setBounds(83, 223, 210, 30);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Apellido");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(330, 110, 58, 17);

        txtMail.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtMail.setEnabled(false);
        getContentPane().add(txtMail);
        txtMail.setBounds(86, 182, 560, 30);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Documento");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(20, 150, 73, 17);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Profecion");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(320, 230, 57, 17);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Fecha de Nacimiento");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(310, 150, 126, 17);

        txtProfecion.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtProfecion.setEnabled(false);
        getContentPane().add(txtProfecion);
        txtProfecion.setBounds(400, 223, 250, 30);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Telfeono");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(22, 233, 52, 17);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Mail");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(22, 192, 21, 17);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Curso");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(210, 60, 46, 17);

        cmbDia.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbDia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1" }));
        cmbDia.setEnabled(false);
        getContentPane().add(cmbDia);
        cmbDia.setBounds(446, 143, 50, 30);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("/");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(560, 150, 8, 17);

        cmbMes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbMes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1" }));
        cmbMes.setEnabled(false);
        cmbMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMesActionPerformed(evt);
            }
        });
        getContentPane().add(cmbMes);
        cmbMes.setBounds(506, 143, 50, 30);

        cmbAnio.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbAnio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2017" }));
        cmbAnio.setEnabled(false);
        cmbAnio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAnioActionPerformed(evt);
            }
        });
        getContentPane().add(cmbAnio);
        cmbAnio.setBounds(570, 143, 80, 30);

        txtMailBusquea.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtMailBusquea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMailBusqueaActionPerformed(evt);
            }
        });
        getContentPane().add(txtMailBusquea);
        txtMailBusquea.setBounds(76, 10, 580, 30);

        tctCurso.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tctCurso.setEnabled(false);
        getContentPane().add(tctCurso);
        tctCurso.setBounds(260, 53, 390, 30);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Mail");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(22, 20, 21, 17);

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/textura-con-manchas-suaves-23827-2560x1600__wallpaper_480x300.jpg"))); // NOI18N
        jLabel14.setText("jLabel13");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(480, 300, 250, 40);

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/textura-con-manchas-suaves-23827-2560x1600__wallpaper_480x300.jpg"))); // NOI18N
        jLabel15.setText("jLabel13");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(-10, 0, 480, 300);

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/textura-con-manchas-suaves-23827-2560x1600__wallpaper_480x300.jpg"))); // NOI18N
        jLabel16.setText("jLabel13");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(470, 0, 310, 300);

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/textura-con-manchas-suaves-23827-2560x1600__wallpaper_480x300.jpg"))); // NOI18N
        jLabel17.setText("jLabel13");
        getContentPane().add(jLabel17);
        jLabel17.setBounds(0, 300, 480, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        switch (instancia){
            case 1://matriculado
                try {
                    if (esValidoMatriculado()){
                        gm = new GestorMatriculado();

                        nombre = txtNombre.getText();
                        apellido = txtApellido.getText();
                        tipoDni = ((TipoDni)cmbTipoDocumento.getSelectedItem()).getId();
                        dni = Integer.parseInt(txtDocumento.getText());
                        fechaNacimiento = cmbDia.getSelectedItem().toString() + "/" + cmbMes.getSelectedItem().toString() + "/" + cmbAnio.getSelectedItem().toString();
                        telefono = txtTelefono.getText();
                        email = txtMail.getText();
                        profecion = txtProfecion.getText();

                        int id_mat = gm.obtenerMatriculado(Integer.parseInt(txtLegajo.getText()));
                        int id_datos = dg.obtenerDatosPorLegajo(Integer.parseInt(txtLegajo.getText()));
                        
                        Matriculado m = new Matriculado(id_mat, legajo, id_datos, profecion);
                        DatosGenerales d = new DatosGenerales(id_datos, nombre, apellido, tipoDni, dni, fechaNacimiento, telefono, email);

                        gm.modificarMatriculado(m, d);
                    }
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(EditarInscripcion.class.getName()).log(Level.SEVERE, null, ex);
                }
            break;
            case 2://Familiar
                try {
                    if (esValidoMatriculado()){
                        dg = new GestorDatosGenerales();

                        nombre = txtNombre.getText();
                        apellido = txtApellido.getText();
                        tipoDni = ((TipoDni)cmbTipoDocumento.getSelectedItem()).getId();
                        dni = Integer.parseInt(txtDocumento.getText());
                        fechaNacimiento = cmbDia.getSelectedItem().toString() + "/" + cmbMes.getSelectedItem().toString() + "/" + cmbAnio.getSelectedItem().toString();
                        telefono = txtTelefono.getText();
                        email = txtMail.getText();

                        int id_datos = dg.obtenerDatosPorLegajo(Integer.parseInt(txtLegajo.getText()));
                        DatosGenerales d = new DatosGenerales(id_datos, nombre, apellido, tipoDni, dni, fechaNacimiento, telefono, email);

                        dg.modificarDatosGenerales(d);
                    }
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(EditarInscripcion.class.getName()).log(Level.SEVERE, null, ex);
                }
            break;
            case 3://Otro
                try {
                    if (esValidoMatriculado()){
                        dg = new GestorDatosGenerales();

                        nombre = txtNombre.getText();
                        apellido = txtApellido.getText();
                        tipoDni = ((TipoDni)cmbTipoDocumento.getSelectedItem()).getId();
                        dni = Integer.parseInt(txtDocumento.getText());
                        fechaNacimiento = cmbDia.getSelectedItem().toString() + "/" + cmbMes.getSelectedItem().toString() + "/" + cmbAnio.getSelectedItem().toString();
                        telefono = txtTelefono.getText();
                        email = txtMail.getText();
                        
                        int id_datos = dg.obtenerDatosPorLegajo(Integer.parseInt(txtLegajo.getText()));
                        DatosGenerales d = new DatosGenerales(id_datos, nombre, apellido, tipoDni, dni, fechaNacimiento, telefono, email);

                        dg.modificarDatosGenerales(d);
                    }
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(EditarInscripcion.class.getName()).log(Level.SEVERE, null, ex);
                }
            break;
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void cmbMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMesActionPerformed
        cargarDiaCombo();
    }//GEN-LAST:event_cmbMesActionPerformed

    private void cmbAnioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAnioActionPerformed
        cargarDiaCombo();
    }//GEN-LAST:event_cmbAnioActionPerformed

    private void txtMailBusqueaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMailBusqueaActionPerformed
       filtoMailyLegajo();
    }//GEN-LAST:event_txtMailBusqueaActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        MenuPrincipal.vEditarInscripcion = false;
    }//GEN-LAST:event_formWindowClosing

    private void txtLegajoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLegajoActionPerformed
        filtoMailyLegajo();
    }//GEN-LAST:event_txtLegajoActionPerformed

    
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("Imagenes/IconoDefinitivo.jpg"));
        return retValue;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditarInscripcion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditarInscripcion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditarInscripcion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditarInscripcion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditarInscripcion().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnModificar;
    private javax.swing.JComboBox cmbAnio;
    private javax.swing.JComboBox cmbDia;
    private javax.swing.JComboBox cmbMes;
    private javax.swing.JComboBox<String> cmbTipoDocumento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField tctCurso;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtDocumento;
    private javax.swing.JTextField txtLegajo;
    private javax.swing.JTextField txtMail;
    private javax.swing.JTextField txtMailBusquea;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtProfecion;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables

    private void cargaCmbMesAnip() {
        DefaultComboBoxModel modelAnio = new DefaultComboBoxModel();
        DefaultComboBoxModel modelMes = new DefaultComboBoxModel();
        
        int anio = 1900;
        int mes = 1;
 
        Calendar cal= Calendar.getInstance(); 
        int year = cal.get(Calendar.YEAR); 
        
        while (anio <= year) {            
            modelAnio.addElement(anio);
            anio++;
        }
        cmbAnio.setModel(modelAnio);
        
        while (mes <= 12) {            
            modelMes.addElement(mes);
            mes++;
        }
        cmbMes.setModel(modelMes);
        
    }
    private void cargarDiaCombo() {
        DefaultComboBoxModel modelDia = new DefaultComboBoxModel();
        int dia = 1;
        int mes = cmbMes.getSelectedIndex()+1;

        while (dia <= 28) {            
            modelDia.addElement(dia);
            dia++;
        } 
        
        if(mes == 2){
            if((int)cmbAnio.getSelectedItem()%4 == 0 && ((int)cmbAnio.getSelectedItem()%100 != 0 || (int)cmbAnio.getSelectedItem()%400 == 0)){
                modelDia.addElement(dia);
            }
        }else if(mes==1 || mes==3 || mes==5 || mes==7 || mes==8 || mes==10 || mes==12){
            while (dia <= 31) {            
                modelDia.addElement(dia);
                dia++;
            }
        }else{
            while (dia <= 30) {            
                modelDia.addElement(dia);
                dia++;
            }
        }
        cmbDia.setModel(modelDia);
    }
    private void activDesactivMatriculado (){
        txtLegajo.setEnabled(false);
        txtNombre.setEnabled(true);
        txtApellido.setEnabled(true);
        txtDocumento.setEnabled(true);
        txtTelefono.setEnabled(true);
        txtMail.setEnabled(true);
        cmbTipoDocumento.setEnabled(true);
        cmbDia.setEnabled(true);
        cmbMes.setEnabled(true);
        cmbAnio.setEnabled(true);
        btnModificar.setEnabled(true);
    }
    private void activDesactivFamilia (){
        txtLegajo.setEnabled(false);
        txtNombre.setEnabled(true);
        txtApellido.setEnabled(true);
        txtDocumento.setEnabled(true);
        txtTelefono.setEnabled(true);
        txtMail.setEnabled(true);
        cmbTipoDocumento.setEnabled(true);
        cmbDia.setEnabled(true);
        cmbMes.setEnabled(true);
        cmbAnio.setEnabled(true);
        btnModificar.setEnabled(true);
    }
    private void activDesactivOtros (){
        txtNombre.setEnabled(true);
        txtApellido.setEnabled(true);
        txtDocumento.setEnabled(true);
        txtTelefono.setEnabled(true);
        txtMail.setEnabled(true);
        cmbTipoDocumento.setEnabled(true);
        cmbDia.setEnabled(true);
        cmbMes.setEnabled(true);
        cmbAnio.setEnabled(true);
        btnModificar.setEnabled(true);
    }
    
    private void filtoMailyLegajo (){
        DatosGenerales datos = new DatosGenerales();
        Matriculado mat = new Matriculado();
        
        gi = new GestorInscripcion();
        dg = new GestorDatosGenerales();
        gm = new GestorMatriculado();
        cg = new GestorCursante();
        gc = new GestorCurso();
        
        mailFiltro = txtMailBusquea.getText();
        legajo = Integer.parseInt(txtLegajo.getText());
        int id_cursante;
        String cursoTxt;
        
        switch (instancia){
            case 1://matriculado
            try {//obtenerMatriculadoxLegajo
                activDesactivMatriculado ();
                
                mat = gm.obtenerMatriculadoxLegajo(legajo);
                datos = dg.obtenerDatosGenerales(mat.getDatos());
                id_cursante = cg.obtenerIdCursantexIdDatosGenerales(datos.getIdDatosGenerales());
//                cursoTxt = gc.obtenerStringCurso(id_cursante);
                System.out.println(datos.toString());
                txtNombre.setText(datos.getNombre());
                txtApellido.setText(datos.getApellido());
                txtDocumento.setText("" + datos.getDni());
                txtTelefono.setText(datos.getTelefono());
                txtMail.setText(datos.getEmail());
                txtProfecion.setText(mat.getProfesion());
                cmbTipoDocumento.setSelectedItem(datos.getTipoDni());
                String[] datosFecha = datos.getFechaNacimiento().split("-");
                cmbAnio.setSelectedIndex(((Integer.parseInt(datosFecha[0]))-1900));
                cmbMes.setSelectedIndex(Integer.parseInt(datosFecha[1])-1);
                cmbDia.setSelectedIndex(Integer.parseInt(datosFecha[2])-1);
                
                
                } catch (SQLException ex) {
                    Logger.getLogger(EditarCurso.class.getName()).log(Level.SEVERE, null, ex);
                }
            break;
            case 2://Familiar
                try {
                activDesactivFamilia ();
                
                datos = dg.obtenerDatosGeneralesXMail(mailFiltro);
                
                txtNombre.setText(datos.getNombre());
                txtApellido.setText(datos.getApellido());
                txtDocumento.setText("" + datos.getDni());
                txtTelefono.setText(datos.getTelefono());
                txtMail.setText(datos.getEmail());
                cmbTipoDocumento.setSelectedItem(datos.getTipoDni());
                String[] datosFecha = datos.getFechaNacimiento().split("-");
                cmbAnio.setSelectedIndex(((Integer.parseInt(datosFecha[0]))-1900));
                cmbMes.setSelectedIndex(Integer.parseInt(datosFecha[1])-1);
                cmbDia.setSelectedIndex(Integer.parseInt(datosFecha[2])-1);
                
                } catch (SQLException ex) {
                    Logger.getLogger(EditarCurso.class.getName()).log(Level.SEVERE, null, ex);
                }
            break;
            case 3://Otro
                try {
                activDesactivOtros();
                
                datos = dg.obtenerDatosGeneralesXMail(mailFiltro);
                
                txtNombre.setText(datos.getNombre());
                txtApellido.setText(datos.getApellido());
                txtDocumento.setText("" + datos.getDni());
                txtTelefono.setText(datos.getTelefono());
                txtMail.setText(datos.getEmail());
                cmbTipoDocumento.setSelectedItem(datos.getTipoDni());
                
                String[] datosFecha = datos.getFechaNacimiento().split("-");

                cmbAnio.setSelectedIndex(((Integer.parseInt(datosFecha[0]))-1900));
                cmbMes.setSelectedIndex(Integer.parseInt(datosFecha[1])-1);
                cmbDia.setSelectedIndex(Integer.parseInt(datosFecha[2])-1);
                } catch (SQLException ex) {
                    Logger.getLogger(EditarCurso.class.getName()).log(Level.SEVERE, null, ex);
                }
            break;
        }
    }
    
    private boolean esValidoMatriculado (){
        if (txtNombre.getText().isEmpty()){
            JOptionPane.showMessageDialog(dialog, "El campo nombre no debe estar vacio!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (txtProfecion.getText().isEmpty()){
            JOptionPane.showMessageDialog(dialog, "El campo profecion no debe estar vacio!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (txtApellido.getText().isEmpty()){
            JOptionPane.showMessageDialog(dialog, "El campo apellido no debe estar vacio!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (txtMail.getText().isEmpty()){
            JOptionPane.showMessageDialog(dialog, "El campo mail no debe estar vacio!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try {
            Integer.parseInt(txtDocumento.getText());
        }catch (Exception ex){
            JOptionPane.showMessageDialog(dialog, "El campo documento debe ser un numero!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        try {
            Integer.parseInt(txtTelefono.getText());
        }catch (Exception ex){
            JOptionPane.showMessageDialog(dialog, "El campo telefono debe ser un numero!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(cmbTipoDocumento.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(dialog, "Debe elegir un tipo de documento!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(cmbDia.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(dialog, "Debe elegir un día!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(cmbMes.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(dialog, "Debe elegir un mes!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(cmbAnio.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(dialog, "Debe elegir un año!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }  
        return (true);
    }
    
    private boolean esValido (){
        if (txtNombre.getText().isEmpty()){
            JOptionPane.showMessageDialog(dialog, "El campo nombre no debe estar vacio!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (txtApellido.getText().isEmpty()){
            JOptionPane.showMessageDialog(dialog, "El campo apellido no debe estar vacio!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (txtMail.getText().isEmpty()){
            JOptionPane.showMessageDialog(dialog, "El campo mail no debe estar vacio!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try {
            Integer.parseInt(txtDocumento.getText());
        }catch (Exception ex){
            JOptionPane.showMessageDialog(dialog, "El campo documento debe ser un numero!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        try {
            Integer.parseInt(txtTelefono.getText());
        }catch (Exception ex){
            JOptionPane.showMessageDialog(dialog, "El campo telefono debe ser un numero!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(cmbTipoDocumento.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(dialog, "Debe elegir un tipo de documento!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(cmbDia.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(dialog, "Debe elegir un día!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(cmbMes.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(dialog, "Debe elegir un mes!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(cmbAnio.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(dialog, "Debe elegir un año!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }  
        return (true);
    }
    
    private void cargarComboTipoDni(ArrayList<TipoDni> obtenerTodos) {
        DefaultComboBoxModel model = new DefaultComboBoxModel();

        for (Object elemento : obtenerTodos) {
            model.addElement(elemento);
        }

        cmbTipoDocumento.setModel(model);
    }
}
